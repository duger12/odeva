
class DisjointSet:
    def __init__(self, nodes):
        self.parent = {node: node for node in nodes}
        self.rank = {node: 0 for node in nodes}
    
    def find(self, node):
        if self.parent[node] != node:
            self.parent[node] = self.find(self.parent[node])
        return self.parent[node]
    
    def union(self, node1, node2):
        root1 = self.find(node1)
        root2 = self.find(node2)
        
        if root1 != root2:
            if self.rank[root1] > self.rank[root2]:
                self.parent[root2] = root1
            elif self.rank[root1] < self.rank[root2]:
                self.parent[root1] = root2
            else:
                self.parent[root2] = root1
                self.rank[root1] += 1

def kruskal(nodes, edges):
    mst = []
    total_cost = 0
    edges = sorted(edges, key=lambda x: x[2])
    ds = DisjointSet(nodes)
    for edge in edges:
        node1, node2, weight = edge
        if ds.find(node1) != ds.find(node2):
            ds.union(node1, node2)
            mst.append(edge)
            total_cost += weight
    return mst, total_cost


nodes = {"A", "B", "C", "D", "E", "F"}
edges = [
    ("A", "B", 4),
    ("A", "C", 2),
    ("A", "D", 5),
    ("B", "D", 10),
    ("C", "D", 3),
    ("C", "E", 8),
    ("D", "E", 4),
    ("D", "F", 6),
    ("E", "F", 1)
]


if __name__ == "__main__":
    mst, cost = kruskal(nodes, edges)
    print("Minimum Yayılan Ağaç:")
    for edge in mst:
        print(f"{edge[0]} - {edge[1]}: {edge[2]}")
    print(f"Toplam Ağırlık: {cost}")
